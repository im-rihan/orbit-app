{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder\\\\orbit-master\\\\orbit-app\\\\src\\\\context\\\\AuthContext.js\";\nimport React, { createContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nconst AuthContext = createContext();\nconst {\n  Provider\n} = AuthContext;\n\nconst AuthProvider = ({\n  children\n}) => {\n  const history = useHistory();\n  const token = localStorage.getItem('token');\n  const userInfo = localStorage.getItem('userInfo');\n  const expiresAt = localStorage.getItem('expiresAt');\n  const [authState, setAuthState] = useState({\n    token,\n    expiresAt,\n    userInfo: userInfo ? JSON.parse(userInfo) : {}\n  });\n\n  const setAuthInfo = ({\n    token,\n    userInfo,\n    expiresAt\n  }) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('userInfo', JSON.stringify(userInfo));\n    localStorage.setItem('expiresAt', expiresAt);\n    setAuthState({\n      token,\n      userInfo,\n      expiresAt\n    });\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('expiresAt');\n    setAuthState({});\n    history.push('/login');\n  };\n\n  const isAuthenticated = () => {\n    if (!authState.token || !authState.expiresAt) {\n      return false;\n    }\n\n    return new Date().getTime() / 1000 < authState.expiresAt;\n  };\n\n  const isAdmin = () => {\n    return authState.userInfo.role === 'admin';\n  };\n\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: {\n      authState,\n      setAuthState: authInfo => setAuthInfo(authInfo),\n      logout,\n      isAuthenticated,\n      isAdmin\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { AuthContext, AuthProvider };","map":{"version":3,"sources":["D:/New folder/orbit-master/orbit-app/src/context/AuthContext.js"],"names":["React","createContext","useState","useHistory","AuthContext","Provider","AuthProvider","children","history","token","localStorage","getItem","userInfo","expiresAt","authState","setAuthState","JSON","parse","setAuthInfo","setItem","stringify","logout","removeItem","push","isAuthenticated","Date","getTime","isAdmin","role","authInfo"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,WAAW,GAAGH,aAAa,EAAjC;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAeD,WAArB;;AAEA,MAAME,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACrC,QAAMC,OAAO,GAAGL,UAAU,EAA1B;AAEA,QAAMM,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAjB;AACA,QAAME,SAAS,GAAGH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAlB;AAEA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC;AACzCO,IAAAA,KADyC;AAEzCI,IAAAA,SAFyC;AAGzCD,IAAAA,QAAQ,EAAEA,QAAQ,GAAGI,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAH,GAA0B;AAHH,GAAD,CAA1C;;AAMA,QAAMM,WAAW,GAAG,CAAC;AAAET,IAAAA,KAAF;AAASG,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,GAAD,KAAoC;AACtDH,IAAAA,YAAY,CAACS,OAAb,CAAqB,OAArB,EAA8BV,KAA9B;AACAC,IAAAA,YAAY,CAACS,OAAb,CACE,UADF,EAEEH,IAAI,CAACI,SAAL,CAAeR,QAAf,CAFF;AAIAF,IAAAA,YAAY,CAACS,OAAb,CAAqB,WAArB,EAAkCN,SAAlC;AAEAE,IAAAA,YAAY,CAAC;AACXN,MAAAA,KADW;AAEXG,MAAAA,QAFW;AAGXC,MAAAA;AAHW,KAAD,CAAZ;AAKD,GAbD;;AAeA,QAAMQ,MAAM,GAAG,MAAM;AACnBX,IAAAA,YAAY,CAACY,UAAb,CAAwB,OAAxB;AACAZ,IAAAA,YAAY,CAACY,UAAb,CAAwB,UAAxB;AACAZ,IAAAA,YAAY,CAACY,UAAb,CAAwB,WAAxB;AACAP,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAP,IAAAA,OAAO,CAACe,IAAR,CAAa,QAAb;AACD,GAND;;AAQA,QAAMC,eAAe,GAAG,MAAM;AAC5B,QAAI,CAACV,SAAS,CAACL,KAAX,IAAoB,CAACK,SAAS,CAACD,SAAnC,EAA8C;AAC5C,aAAO,KAAP;AACD;;AACD,WACE,IAAIY,IAAJ,GAAWC,OAAX,KAAuB,IAAvB,GAA8BZ,SAAS,CAACD,SAD1C;AAGD,GAPD;;AASA,QAAMc,OAAO,GAAG,MAAM;AACpB,WAAOb,SAAS,CAACF,QAAV,CAAmBgB,IAAnB,KAA4B,OAAnC;AACD,GAFD;;AAIA,sBACE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE;AACLd,MAAAA,SADK;AAELC,MAAAA,YAAY,EAAEc,QAAQ,IAAIX,WAAW,CAACW,QAAD,CAFhC;AAGLR,MAAAA,MAHK;AAILG,MAAAA,eAJK;AAKLG,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGpB,QATH,CADF;AAaD,CA9DD;;AAgEA,SAASH,WAAT,EAAsBE,YAAtB","sourcesContent":["import React, { createContext, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst AuthContext = createContext();\nconst { Provider } = AuthContext;\n\nconst AuthProvider = ({ children }) => {\n  const history = useHistory();\n\n  const token = localStorage.getItem('token');\n  const userInfo = localStorage.getItem('userInfo');\n  const expiresAt = localStorage.getItem('expiresAt');\n\n  const [authState, setAuthState] = useState({\n    token,\n    expiresAt,\n    userInfo: userInfo ? JSON.parse(userInfo) : {}\n  });\n\n  const setAuthInfo = ({ token, userInfo, expiresAt }) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem(\n      'userInfo',\n      JSON.stringify(userInfo)\n    );\n    localStorage.setItem('expiresAt', expiresAt);\n\n    setAuthState({\n      token,\n      userInfo,\n      expiresAt\n    });\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userInfo');\n    localStorage.removeItem('expiresAt');\n    setAuthState({});\n    history.push('/login');\n  };\n\n  const isAuthenticated = () => {\n    if (!authState.token || !authState.expiresAt) {\n      return false;\n    }\n    return (\n      new Date().getTime() / 1000 < authState.expiresAt\n    );\n  };\n\n  const isAdmin = () => {\n    return authState.userInfo.role === 'admin';\n  };\n\n  return (\n    <Provider\n      value={{\n        authState,\n        setAuthState: authInfo => setAuthInfo(authInfo),\n        logout,\n        isAuthenticated,\n        isAdmin\n      }}\n    >\n      {children}\n    </Provider>\n  );\n};\n\nexport { AuthContext, AuthProvider };\n"]},"metadata":{},"sourceType":"module"}