{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder\\\\orbit-master\\\\orbit-app\\\\src\\\\components\\\\DashboardChart.js\";\nimport React from 'react';\nimport { Line as LineChart } from 'react-chartjs-2';\nimport { formatCurrency } from './../util';\n\nconst DashboardChart = ({\n  salesData\n}) => {\n  const chartLabels = salesData.map(sale => sale.date);\n  const chartValues = salesData.map(sale => sale.amount);\n\n  const chartData = canvas => {\n    const ctx = canvas.getContext('2d');\n    var gradientFill = ctx.createLinearGradient(0, 0, 0, 250);\n    gradientFill.addColorStop(0, 'rgba(0, 97, 215, 0.3)');\n    gradientFill.addColorStop(1, 'rgba(0, 200, 255, 0)');\n    return {\n      labels: chartLabels,\n      datasets: [{\n        label: 'Sales',\n        borderColor: '#3182ce',\n        data: chartValues,\n        backgroundColor: gradientFill\n      }]\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(LineChart, {\n    height: 100,\n    data: chartData,\n    options: {\n      elements: {\n        line: {\n          tension: 0.3,\n          borderWidth: 1.5\n        },\n        point: {\n          radius: 0\n        }\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            callback: value => formatCurrency(value)\n          }\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default DashboardChart;","map":{"version":3,"sources":["D:/New folder/orbit-master/orbit-app/src/components/DashboardChart.js"],"names":["React","Line","LineChart","formatCurrency","DashboardChart","salesData","chartLabels","map","sale","date","chartValues","amount","chartData","canvas","ctx","getContext","gradientFill","createLinearGradient","addColorStop","labels","datasets","label","borderColor","data","backgroundColor","elements","line","tension","borderWidth","point","radius","scales","yAxes","ticks","callback","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAI,IAAIC,SAAjB,QAAkC,iBAAlC;AACA,SAASC,cAAT,QAA+B,WAA/B;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AACxC,QAAMC,WAAW,GAAGD,SAAS,CAACE,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACC,IAA3B,CAApB;AACA,QAAMC,WAAW,GAAGL,SAAS,CAACE,GAAV,CAAcC,IAAI,IAAIA,IAAI,CAACG,MAA3B,CAApB;;AAEA,QAAMC,SAAS,GAAGC,MAAM,IAAI;AAC1B,UAAMC,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACA,QAAIC,YAAY,GAAGF,GAAG,CAACG,oBAAJ,CACjB,CADiB,EAEjB,CAFiB,EAGjB,CAHiB,EAIjB,GAJiB,CAAnB;AAMAD,IAAAA,YAAY,CAACE,YAAb,CAA0B,CAA1B,EAA6B,uBAA7B;AACAF,IAAAA,YAAY,CAACE,YAAb,CAA0B,CAA1B,EAA6B,sBAA7B;AACA,WAAO;AACLC,MAAAA,MAAM,EAAEb,WADH;AAELc,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,OADT;AAEEC,QAAAA,WAAW,EAAE,SAFf;AAGEC,QAAAA,IAAI,EAAEb,WAHR;AAIEc,QAAAA,eAAe,EAAER;AAJnB,OADQ;AAFL,KAAP;AAWD,GArBD;;AAuBA,sBACE,oBAAC,SAAD;AACE,IAAA,MAAM,EAAE,GADV;AAEE,IAAA,IAAI,EAAEJ,SAFR;AAGE,IAAA,OAAO,EAAE;AACPa,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE,GADL;AAEJC,UAAAA,WAAW,EAAE;AAFT,SADE;AAKRC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV;AALC,OADH;AAQPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,KAAK,EAAE;AACLC,YAAAA,QAAQ,EAAEC,KAAK,IAAIhC,cAAc,CAACgC,KAAD;AAD5B;AADT,SADK;AADD;AARD,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAwBD,CAnDD;;AAqDA,eAAe/B,cAAf","sourcesContent":["import React from 'react';\nimport { Line as LineChart } from 'react-chartjs-2';\nimport { formatCurrency } from './../util';\n\nconst DashboardChart = ({ salesData }) => {\n  const chartLabels = salesData.map(sale => sale.date);\n  const chartValues = salesData.map(sale => sale.amount);\n\n  const chartData = canvas => {\n    const ctx = canvas.getContext('2d');\n    var gradientFill = ctx.createLinearGradient(\n      0,\n      0,\n      0,\n      250\n    );\n    gradientFill.addColorStop(0, 'rgba(0, 97, 215, 0.3)');\n    gradientFill.addColorStop(1, 'rgba(0, 200, 255, 0)');\n    return {\n      labels: chartLabels,\n      datasets: [\n        {\n          label: 'Sales',\n          borderColor: '#3182ce',\n          data: chartValues,\n          backgroundColor: gradientFill\n        }\n      ]\n    };\n  };\n\n  return (\n    <LineChart\n      height={100}\n      data={chartData}\n      options={{\n        elements: {\n          line: {\n            tension: 0.3,\n            borderWidth: 1.5\n          },\n          point: { radius: 0 }\n        },\n        scales: {\n          yAxes: [\n            {\n              ticks: {\n                callback: value => formatCurrency(value)\n              }\n            }\n          ]\n        }\n      }}\n    />\n  );\n};\n\nexport default DashboardChart;\n"]},"metadata":{},"sourceType":"module"}